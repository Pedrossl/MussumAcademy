# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BaseDTO {
  createdAt: DateTime!
  deletedAt: DateTime!
  updateAt: DateTime!
}

type BaseDTOAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  updateAt: DateTime
}

type BaseDTOConnection {
  """Array of edges."""
  edges: [BaseDTOEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type BaseDTOCountAggregate {
  createdAt: Int
  deletedAt: Int
  updateAt: Int
}

input BaseDTODeleteFilter {
  and: [BaseDTODeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  or: [BaseDTODeleteFilter!]
  updateAt: DateFieldComparison
}

type BaseDTODeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  updateAt: DateTime
}

type BaseDTOEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BaseDTO"""
  node: BaseDTO!
}

input BaseDTOFilter {
  and: [BaseDTOFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  or: [BaseDTOFilter!]
  updateAt: DateFieldComparison
}

type BaseDTOMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  updateAt: DateTime
}

type BaseDTOMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  updateAt: DateTime
}

input BaseDTOSort {
  direction: SortDirection!
  field: BaseDTOSortFields!
  nulls: SortNulls
}

enum BaseDTOSortFields {
  createdAt
  deletedAt
  updateAt
}

input BaseDTOUpdateFilter {
  and: [BaseDTOUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  or: [BaseDTOUpdateFilter!]
  updateAt: DateFieldComparison
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type Content {
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  linkContent: String
  updateAt: DateTime!
}

type ContentAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  linkContent: String
  updateAt: DateTime
}

type ContentConnection {
  """Array of nodes."""
  nodes: [Content!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ContentCountAggregate {
  createdAt: Int
  deletedAt: Int
  description: Int
  linkContent: Int
  updateAt: Int
}

input ContentDeleteFilter {
  and: [ContentDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  linkContent: StringFieldComparison
  or: [ContentDeleteFilter!]
  updateAt: DateFieldComparison
}

type ContentDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  linkContent: String
  updateAt: DateTime
}

input ContentFilter {
  and: [ContentFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  linkContent: StringFieldComparison
  or: [ContentFilter!]
  updateAt: DateFieldComparison
}

type ContentMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  linkContent: String
  updateAt: DateTime
}

type ContentMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  linkContent: String
  updateAt: DateTime
}

input ContentSort {
  direction: SortDirection!
  field: ContentSortFields!
  nulls: SortNulls
}

enum ContentSortFields {
  createdAt
  deletedAt
  description
  linkContent
  updateAt
}

input ContentUpdateFilter {
  and: [ContentUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  linkContent: StringFieldComparison
  or: [ContentUpdateFilter!]
  updateAt: DateFieldComparison
}

input CreateBaseDTO {
  createdAt: DateTime
  deletedAt: DateTime
  updateAt: DateTime
}

input CreateContentDTO {
  description: String!
  linkContent: String
}

input CreateDiciplineDTO {
  name: String!
}

input CreateLessonDTO {
  description: String!
}

input CreateManyBaseDTOSInput {
  """Array of records to create"""
  baseDTOS: [CreateBaseDTO!]!
}

input CreateManyContentsInput {
  """Array of records to create"""
  contents: [CreateContentDTO!]!
}

input CreateManyDiciplinesInput {
  """Array of records to create"""
  diciplines: [CreateDiciplineDTO!]!
}

input CreateManyLessonsInput {
  """Array of records to create"""
  lessons: [CreateLessonDTO!]!
}

input CreateOneBaseDTOInput {
  """The record to create"""
  baseDTO: CreateBaseDTO!
}

input CreateOneContentInput {
  """The record to create"""
  content: CreateContentDTO!
}

input CreateOneDiciplineInput {
  """The record to create"""
  dicipline: CreateDiciplineDTO!
}

input CreateOneLessonInput {
  """The record to create"""
  lesson: CreateLessonDTO!
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyBaseDTOSInput {
  """Filter to find records to delete"""
  filter: BaseDTODeleteFilter!
}

input DeleteManyContentsInput {
  """Filter to find records to delete"""
  filter: ContentDeleteFilter!
}

input DeleteManyDiciplinesInput {
  """Filter to find records to delete"""
  filter: diciplineDeleteFilter!
}

input DeleteManyLessonsInput {
  """Filter to find records to delete"""
  filter: lessonDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteOneBaseDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneContentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDiciplineInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneLessonInput {
  """The id of the record to delete."""
  id: ID!
}

type DiciplineConnection {
  """Array of nodes."""
  nodes: [dicipline!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type DiciplineDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  name: String
  updateAt: DateTime
}

type LessonConnection {
  """Array of nodes."""
  nodes: [lesson!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type LessonDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  updateAt: DateTime
}

type Mutation {
  createManyBaseDTOS(input: CreateManyBaseDTOSInput!): [BaseDTO!]!
  createManyContents(input: CreateManyContentsInput!): [Content!]!
  createManyDiciplines(input: CreateManyDiciplinesInput!): [dicipline!]!
  createManyLessons(input: CreateManyLessonsInput!): [lesson!]!
  createOneBaseDTO(input: CreateOneBaseDTOInput!): BaseDTO!
  createOneContent(input: CreateOneContentInput!): Content!
  createOneDicipline(input: CreateOneDiciplineInput!): dicipline!
  createOneLesson(input: CreateOneLessonInput!): lesson!
  deleteManyBaseDTOS(input: DeleteManyBaseDTOSInput!): DeleteManyResponse!
  deleteManyContents(input: DeleteManyContentsInput!): DeleteManyResponse!
  deleteManyDiciplines(input: DeleteManyDiciplinesInput!): DeleteManyResponse!
  deleteManyLessons(input: DeleteManyLessonsInput!): DeleteManyResponse!
  deleteOneBaseDTO(input: DeleteOneBaseDTOInput!): BaseDTODeleteResponse!
  deleteOneContent(input: DeleteOneContentInput!): ContentDeleteResponse!
  deleteOneDicipline(input: DeleteOneDiciplineInput!): DiciplineDeleteResponse!
  deleteOneLesson(input: DeleteOneLessonInput!): LessonDeleteResponse!
  updateManyBaseDTOS(input: UpdateManyBaseDTOSInput!): UpdateManyResponse!
  updateManyContents(input: UpdateManyContentsInput!): UpdateManyResponse!
  updateManyDiciplines(input: UpdateManyDiciplinesInput!): UpdateManyResponse!
  updateManyLessons(input: UpdateManyLessonsInput!): UpdateManyResponse!
  updateOneBaseDTO(input: UpdateOneBaseDTOInput!): BaseDTO!
  updateOneContent(input: UpdateOneContentInput!): Content!
  updateOneDicipline(input: UpdateOneDiciplineInput!): dicipline!
  updateOneLesson(input: UpdateOneLessonInput!): lesson!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Query {
  baseDTO(
    """The id of the record to find."""
    id: ID!
  ): BaseDTO
  baseDTOS(
    """Specify to filter the records returned."""
    filter: BaseDTOFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BaseDTOSort!]! = []
  ): BaseDTOConnection!
  content(
    """The id of the record to find."""
    id: ID!
  ): Content
  contents(
    """Specify to filter the records returned."""
    filter: ContentFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [ContentSort!]! = []
  ): ContentConnection!
  dicipline(
    """The id of the record to find."""
    id: ID!
  ): dicipline
  diciplines(
    """Specify to filter the records returned."""
    filter: diciplineFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [diciplineSort!]! = []
  ): DiciplineConnection!
  lesson(
    """The id of the record to find."""
    id: ID!
  ): lesson
  lessons(
    """Specify to filter the records returned."""
    filter: lessonFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [lessonSort!]! = []
  ): LessonConnection!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateBaseDTO {
  createdAt: DateTime
  deletedAt: DateTime
  updateAt: DateTime
}

input UpdateContentDTO {
  description: String
  id: Int!
  linkContent: String
}

input UpdateDicipline {
  createdAt: DateTime
  deletedAt: DateTime
  name: String
  updateAt: DateTime
}

input UpdateLesson {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  updateAt: DateTime
}

input UpdateManyBaseDTOSInput {
  """Filter used to find fields to update"""
  filter: BaseDTOUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBaseDTO!
}

input UpdateManyContentsInput {
  """Filter used to find fields to update"""
  filter: ContentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateContentDTO!
}

input UpdateManyDiciplinesInput {
  """Filter used to find fields to update"""
  filter: diciplineUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDicipline!
}

input UpdateManyLessonsInput {
  """Filter used to find fields to update"""
  filter: lessonUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLesson!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateOneBaseDTOInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBaseDTO!
}

input UpdateOneContentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateContentDTO!
}

input UpdateOneDiciplineInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDicipline!
}

input UpdateOneLessonInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLesson!
}

type dicipline {
  createdAt: DateTime!
  deletedAt: DateTime!
  name: String!
  updateAt: DateTime!
}

type diciplineAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  name: String
  updateAt: DateTime
}

type diciplineCountAggregate {
  createdAt: Int
  deletedAt: Int
  name: Int
  updateAt: Int
}

input diciplineDeleteFilter {
  and: [diciplineDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  or: [diciplineDeleteFilter!]
  updateAt: DateFieldComparison
}

input diciplineFilter {
  and: [diciplineFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  or: [diciplineFilter!]
  updateAt: DateFieldComparison
}

type diciplineMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  name: String
  updateAt: DateTime
}

type diciplineMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  name: String
  updateAt: DateTime
}

input diciplineSort {
  direction: SortDirection!
  field: diciplineSortFields!
  nulls: SortNulls
}

enum diciplineSortFields {
  createdAt
  deletedAt
  name
  updateAt
}

input diciplineUpdateFilter {
  and: [diciplineUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  name: StringFieldComparison
  or: [diciplineUpdateFilter!]
  updateAt: DateFieldComparison
}

type lesson {
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  updateAt: DateTime!
}

type lessonAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  updateAt: DateTime
}

type lessonCountAggregate {
  createdAt: Int
  deletedAt: Int
  description: Int
  updateAt: Int
}

input lessonDeleteFilter {
  and: [lessonDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  or: [lessonDeleteFilter!]
  updateAt: DateFieldComparison
}

input lessonFilter {
  and: [lessonFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  or: [lessonFilter!]
  updateAt: DateFieldComparison
}

type lessonMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  updateAt: DateTime
}

type lessonMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  updateAt: DateTime
}

input lessonSort {
  direction: SortDirection!
  field: lessonSortFields!
  nulls: SortNulls
}

enum lessonSortFields {
  createdAt
  deletedAt
  description
  updateAt
}

input lessonUpdateFilter {
  and: [lessonUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  or: [lessonUpdateFilter!]
  updateAt: DateFieldComparison
}