# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddContentsToLessonInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddDiciplinesToLessonInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddDisciplinesToStudentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddLessonsToDiciplineInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input AddStudentsToDiciplineInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

type BaseDTO {
  createdAt: DateTime!
  deletedAt: DateTime!
  id: String!
  updateAt: DateTime!
}

type BaseDTOAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updateAt: DateTime
}

type BaseDTOConnection {
  """Array of edges."""
  edges: [BaseDTOEdge!]!

  """Paging information"""
  pageInfo: PageInfo!
}

type BaseDTOCountAggregate {
  createdAt: Int
  deletedAt: Int
  id: Int
  updateAt: Int
}

input BaseDTODeleteFilter {
  and: [BaseDTODeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  or: [BaseDTODeleteFilter!]
  updateAt: DateFieldComparison
}

type BaseDTODeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updateAt: DateTime
}

type BaseDTOEdge {
  """Cursor for this node."""
  cursor: ConnectionCursor!

  """The node containing the BaseDTO"""
  node: BaseDTO!
}

input BaseDTOFilter {
  and: [BaseDTOFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  or: [BaseDTOFilter!]
  updateAt: DateFieldComparison
}

type BaseDTOMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updateAt: DateTime
}

type BaseDTOMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updateAt: DateTime
}

input BaseDTOSort {
  direction: SortDirection!
  field: BaseDTOSortFields!
  nulls: SortNulls
}

enum BaseDTOSortFields {
  createdAt
  deletedAt
  id
  updateAt
}

input BaseDTOUpdateFilter {
  and: [BaseDTOUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  or: [BaseDTOUpdateFilter!]
  updateAt: DateFieldComparison
}

"""Cursor for paging through collections"""
scalar ConnectionCursor

type Content {
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  id: String!
  lesson: lesson!
  linkContent: String
  updateAt: DateTime!
}

type ContentAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  linkContent: String
  updateAt: DateTime
}

type ContentConnection {
  """Array of nodes."""
  nodes: [Content!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ContentCountAggregate {
  createdAt: Int
  deletedAt: Int
  description: Int
  id: Int
  linkContent: Int
  updateAt: Int
}

input ContentDeleteFilter {
  and: [ContentDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  linkContent: StringFieldComparison
  or: [ContentDeleteFilter!]
  updateAt: DateFieldComparison
}

type ContentDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  linkContent: String
  updateAt: DateTime
}

input ContentFilter {
  and: [ContentFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  lesson: ContentFilterlessonFilter
  linkContent: StringFieldComparison
  or: [ContentFilter!]
  updateAt: DateFieldComparison
}

input ContentFilterlessonFilter {
  and: [ContentFilterlessonFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  or: [ContentFilterlessonFilter!]
  updateAt: DateFieldComparison
}

type ContentMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  linkContent: String
  updateAt: DateTime
}

type ContentMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  linkContent: String
  updateAt: DateTime
}

input ContentSort {
  direction: SortDirection!
  field: ContentSortFields!
  nulls: SortNulls
}

enum ContentSortFields {
  createdAt
  deletedAt
  description
  id
  linkContent
  updateAt
}

input ContentUpdateFilter {
  and: [ContentUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  linkContent: StringFieldComparison
  or: [ContentUpdateFilter!]
  updateAt: DateFieldComparison
}

input CreateBaseDTO {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updateAt: DateTime
}

input CreateContentDTO {
  description: String!
  lessonId: String
  linkContent: String
}

input CreateDiciplineDTO {
  lessonId: String
  name: String!
}

input CreateLessonDTO {
  description: String!
  diciplineId: String
}

input CreateManyBaseDTOSInput {
  """Array of records to create"""
  baseDTOS: [CreateBaseDTO!]!
}

input CreateManyContentsInput {
  """Array of records to create"""
  contents: [CreateContentDTO!]!
}

input CreateManyDiciplinesInput {
  """Array of records to create"""
  diciplines: [CreateDiciplineDTO!]!
}

input CreateManyLessonsInput {
  """Array of records to create"""
  lessons: [CreateLessonDTO!]!
}

input CreateManyStudentsInput {
  """Array of records to create"""
  students: [CreateStudentDTO!]!
}

input CreateOneBaseDTOInput {
  """The record to create"""
  baseDTO: CreateBaseDTO!
}

input CreateOneContentInput {
  """The record to create"""
  content: CreateContentDTO!
}

input CreateOneDiciplineInput {
  """The record to create"""
  dicipline: CreateDiciplineDTO!
}

input CreateOneLessonInput {
  """The record to create"""
  lesson: CreateLessonDTO!
}

input CreateOneStudentInput {
  """The record to create"""
  student: CreateStudentDTO!
}

input CreateStudentDTO {
  key: String!
  name: String!
}

input CursorPaging {
  """Paginate after opaque cursor"""
  after: ConnectionCursor

  """Paginate before opaque cursor"""
  before: ConnectionCursor

  """Paginate first"""
  first: Int

  """Paginate last"""
  last: Int
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyBaseDTOSInput {
  """Filter to find records to delete"""
  filter: BaseDTODeleteFilter!
}

input DeleteManyContentsInput {
  """Filter to find records to delete"""
  filter: ContentDeleteFilter!
}

input DeleteManyDiciplinesInput {
  """Filter to find records to delete"""
  filter: diciplineDeleteFilter!
}

input DeleteManyLessonsInput {
  """Filter to find records to delete"""
  filter: lessonDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyStudentsInput {
  """Filter to find records to delete"""
  filter: StudentDeleteFilter!
}

input DeleteOneBaseDTOInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneContentInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneDiciplineInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneLessonInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneStudentInput {
  """The id of the record to delete."""
  id: ID!
}

type DiciplineConnection {
  """Array of nodes."""
  nodes: [dicipline!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type DiciplineDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updateAt: DateTime
}

type DiciplineLessonsConnection {
  """Array of nodes."""
  nodes: [lesson!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type DiciplineStudentsConnection {
  """Array of nodes."""
  nodes: [Student!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type LessonConnection {
  """Array of nodes."""
  nodes: [lesson!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type LessonContentsConnection {
  """Array of nodes."""
  nodes: [Content!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type LessonDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  updateAt: DateTime
}

type LessonDiciplinesConnection {
  """Array of nodes."""
  nodes: [dicipline!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type Mutation {
  addContentsToLesson(input: AddContentsToLessonInput!): lesson!
  addDiciplinesToLesson(input: AddDiciplinesToLessonInput!): lesson!
  addDisciplinesToStudent(input: AddDisciplinesToStudentInput!): Student!
  addLessonsToDicipline(input: AddLessonsToDiciplineInput!): dicipline!
  addStudentsToDicipline(input: AddStudentsToDiciplineInput!): dicipline!
  createManyBaseDTOS(input: CreateManyBaseDTOSInput!): [BaseDTO!]!
  createManyContents(input: CreateManyContentsInput!): [Content!]!
  createManyDiciplines(input: CreateManyDiciplinesInput!): [dicipline!]!
  createManyLessons(input: CreateManyLessonsInput!): [lesson!]!
  createManyStudents(input: CreateManyStudentsInput!): [Student!]!
  createOneBaseDTO(input: CreateOneBaseDTOInput!): BaseDTO!
  createOneContent(input: CreateOneContentInput!): Content!
  createOneDicipline(input: CreateOneDiciplineInput!): dicipline!
  createOneLesson(input: CreateOneLessonInput!): lesson!
  createOneStudent(input: CreateOneStudentInput!): Student!
  deleteManyBaseDTOS(input: DeleteManyBaseDTOSInput!): DeleteManyResponse!
  deleteManyContents(input: DeleteManyContentsInput!): DeleteManyResponse!
  deleteManyDiciplines(input: DeleteManyDiciplinesInput!): DeleteManyResponse!
  deleteManyLessons(input: DeleteManyLessonsInput!): DeleteManyResponse!
  deleteManyStudents(input: DeleteManyStudentsInput!): DeleteManyResponse!
  deleteOneBaseDTO(input: DeleteOneBaseDTOInput!): BaseDTODeleteResponse!
  deleteOneContent(input: DeleteOneContentInput!): ContentDeleteResponse!
  deleteOneDicipline(input: DeleteOneDiciplineInput!): DiciplineDeleteResponse!
  deleteOneLesson(input: DeleteOneLessonInput!): LessonDeleteResponse!
  deleteOneStudent(input: DeleteOneStudentInput!): StudentDeleteResponse!
  removeContentsFromLesson(input: RemoveContentsFromLessonInput!): lesson!
  removeDiciplinesFromLesson(input: RemoveDiciplinesFromLessonInput!): lesson!
  removeDisciplinesFromStudent(input: RemoveDisciplinesFromStudentInput!): Student!
  removeLessonFromContent(input: RemoveLessonFromContentInput!): Content!
  removeLessonsFromDicipline(input: RemoveLessonsFromDiciplineInput!): dicipline!
  removeStudentsFromDicipline(input: RemoveStudentsFromDiciplineInput!): dicipline!
  setContentsOnLesson(input: SetContentsOnLessonInput!): lesson!
  setDiciplinesOnLesson(input: SetDiciplinesOnLessonInput!): lesson!
  setDisciplinesOnStudent(input: SetDisciplinesOnStudentInput!): Student!
  setLessonOnContent(input: SetLessonOnContentInput!): Content!
  setLessonsOnDicipline(input: SetLessonsOnDiciplineInput!): dicipline!
  setStudentsOnDicipline(input: SetStudentsOnDiciplineInput!): dicipline!
  updateManyBaseDTOS(input: UpdateManyBaseDTOSInput!): UpdateManyResponse!
  updateManyContents(input: UpdateManyContentsInput!): UpdateManyResponse!
  updateManyDiciplines(input: UpdateManyDiciplinesInput!): UpdateManyResponse!
  updateManyLessons(input: UpdateManyLessonsInput!): UpdateManyResponse!
  updateManyStudents(input: UpdateManyStudentsInput!): UpdateManyResponse!
  updateOneBaseDTO(input: UpdateOneBaseDTOInput!): BaseDTO!
  updateOneContent(input: UpdateOneContentInput!): Content!
  updateOneDicipline(input: UpdateOneDiciplineInput!): dicipline!
  updateOneLesson(input: UpdateOneLessonInput!): lesson!
  updateOneStudent(input: UpdateOneStudentInput!): Student!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type PageInfo {
  """The cursor of the last returned record."""
  endCursor: ConnectionCursor

  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean

  """The cursor of the first returned record."""
  startCursor: ConnectionCursor
}

type Query {
  baseDTO(
    """The id of the record to find."""
    id: ID!
  ): BaseDTO
  baseDTOS(
    """Specify to filter the records returned."""
    filter: BaseDTOFilter! = {}

    """Limit or page results."""
    paging: CursorPaging! = {first: 10}

    """Specify to sort results."""
    sorting: [BaseDTOSort!]! = []
  ): BaseDTOConnection!
  content(
    """The id of the record to find."""
    id: ID!
  ): Content
  contents(
    """Specify to filter the records returned."""
    filter: ContentFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [ContentSort!]! = []
  ): ContentConnection!
  dicipline(
    """The id of the record to find."""
    id: ID!
  ): dicipline
  diciplines(
    """Specify to filter the records returned."""
    filter: diciplineFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [diciplineSort!]! = []
  ): DiciplineConnection!
  lesson(
    """The id of the record to find."""
    id: ID!
  ): lesson
  lessons(
    """Specify to filter the records returned."""
    filter: lessonFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [lessonSort!]! = []
  ): LessonConnection!
  student(
    """The id of the record to find."""
    id: ID!
  ): Student
  students(
    """Specify to filter the records returned."""
    filter: StudentFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [StudentSort!]! = []
  ): StudentConnection!
}

input RemoveContentsFromLessonInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveDiciplinesFromLessonInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveDisciplinesFromStudentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveLessonFromContentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input RemoveLessonsFromDiciplineInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveStudentsFromDiciplineInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetContentsOnLessonInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetDiciplinesOnLessonInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetDisciplinesOnStudentInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetLessonOnContentInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetLessonsOnDiciplineInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetStudentsOnDiciplineInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

type Student {
  createdAt: DateTime!
  deletedAt: DateTime!
  disciplines(
    """Specify to filter the records returned."""
    filter: diciplineFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [diciplineSort!]! = []
  ): StudentDisciplinesConnection
  id: String!
  key: String!
  name: String!
  updateAt: DateTime!
}

type StudentAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  key: String
  name: String
  updateAt: DateTime
}

type StudentConnection {
  """Array of nodes."""
  nodes: [Student!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type StudentCountAggregate {
  createdAt: Int
  deletedAt: Int
  id: Int
  key: Int
  name: Int
  updateAt: Int
}

input StudentDeleteFilter {
  and: [StudentDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  key: StringFieldComparison
  name: StringFieldComparison
  or: [StudentDeleteFilter!]
  updateAt: DateFieldComparison
}

type StudentDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  key: String
  name: String
  updateAt: DateTime
}

type StudentDisciplinesConnection {
  """Array of nodes."""
  nodes: [dicipline!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input StudentFilter {
  and: [StudentFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  disciplines: StudentFilterdiciplineFilter
  id: StringFieldComparison
  key: StringFieldComparison
  name: StringFieldComparison
  or: [StudentFilter!]
  updateAt: DateFieldComparison
}

input StudentFilterdiciplineFilter {
  and: [StudentFilterdiciplineFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [StudentFilterdiciplineFilter!]
  updateAt: DateFieldComparison
}

type StudentMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  key: String
  name: String
  updateAt: DateTime
}

type StudentMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  key: String
  name: String
  updateAt: DateTime
}

input StudentSort {
  direction: SortDirection!
  field: StudentSortFields!
  nulls: SortNulls
}

enum StudentSortFields {
  createdAt
  deletedAt
  id
  key
  name
  updateAt
}

input StudentUpdateFilter {
  and: [StudentUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  key: StringFieldComparison
  name: StringFieldComparison
  or: [StudentUpdateFilter!]
  updateAt: DateFieldComparison
}

input UpdateBaseDTO {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updateAt: DateTime
}

input UpdateContentDTO {
  description: String
  id: ID!
  lessonId: String
  linkContent: String
}

input UpdateDicipline {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updateAt: DateTime
}

input UpdateLesson {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  updateAt: DateTime
}

input UpdateManyBaseDTOSInput {
  """Filter used to find fields to update"""
  filter: BaseDTOUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateBaseDTO!
}

input UpdateManyContentsInput {
  """Filter used to find fields to update"""
  filter: ContentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateContentDTO!
}

input UpdateManyDiciplinesInput {
  """Filter used to find fields to update"""
  filter: diciplineUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateDicipline!
}

input UpdateManyLessonsInput {
  """Filter used to find fields to update"""
  filter: lessonUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLesson!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyStudentsInput {
  """Filter used to find fields to update"""
  filter: StudentUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateStudentDTO!
}

input UpdateOneBaseDTOInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateBaseDTO!
}

input UpdateOneContentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateContentDTO!
}

input UpdateOneDiciplineInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateDicipline!
}

input UpdateOneLessonInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLesson!
}

input UpdateOneStudentInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateStudentDTO!
}

input UpdateStudentDTO {
  id: Int!
  key: String
  name: String
}

type dicipline {
  createdAt: DateTime!
  deletedAt: DateTime!
  id: String!
  lessons(
    """Specify to filter the records returned."""
    filter: lessonFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [lessonSort!]! = []
  ): DiciplineLessonsConnection
  name: String!
  students(
    """Specify to filter the records returned."""
    filter: StudentFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [StudentSort!]! = []
  ): DiciplineStudentsConnection
  updateAt: DateTime!
}

type diciplineAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updateAt: DateTime
}

type diciplineCountAggregate {
  createdAt: Int
  deletedAt: Int
  id: Int
  name: Int
  updateAt: Int
}

input diciplineDeleteFilter {
  and: [diciplineDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [diciplineDeleteFilter!]
  updateAt: DateFieldComparison
}

input diciplineFilter {
  and: [diciplineFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  lesson: diciplineFilterlessonFilter
  name: StringFieldComparison
  or: [diciplineFilter!]
  students: diciplineFilterStudentFilter
  updateAt: DateFieldComparison
}

input diciplineFilterStudentFilter {
  and: [diciplineFilterStudentFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  key: StringFieldComparison
  name: StringFieldComparison
  or: [diciplineFilterStudentFilter!]
  updateAt: DateFieldComparison
}

input diciplineFilterlessonFilter {
  and: [diciplineFilterlessonFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  or: [diciplineFilterlessonFilter!]
  updateAt: DateFieldComparison
}

type diciplineMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updateAt: DateTime
}

type diciplineMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  name: String
  updateAt: DateTime
}

input diciplineSort {
  direction: SortDirection!
  field: diciplineSortFields!
  nulls: SortNulls
}

enum diciplineSortFields {
  createdAt
  deletedAt
  id
  name
  updateAt
}

input diciplineUpdateFilter {
  and: [diciplineUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [diciplineUpdateFilter!]
  updateAt: DateFieldComparison
}

type lesson {
  contents(
    """Specify to filter the records returned."""
    filter: ContentFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [ContentSort!]! = []
  ): LessonContentsConnection
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  diciplines(
    """Specify to filter the records returned."""
    filter: diciplineFilter! = {}

    """Limit or page results."""
    paging: OffsetPaging! = {limit: 10}

    """Specify to sort results."""
    sorting: [diciplineSort!]! = []
  ): LessonDiciplinesConnection
  id: String!
  updateAt: DateTime!
}

type lessonAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  updateAt: DateTime
}

type lessonCountAggregate {
  createdAt: Int
  deletedAt: Int
  description: Int
  id: Int
  updateAt: Int
}

input lessonDeleteFilter {
  and: [lessonDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  or: [lessonDeleteFilter!]
  updateAt: DateFieldComparison
}

input lessonFilter {
  and: [lessonFilter!]
  contents: lessonFilterContentFilter
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  dicipline: lessonFilterdiciplineFilter
  id: StringFieldComparison
  or: [lessonFilter!]
  updateAt: DateFieldComparison
}

input lessonFilterContentFilter {
  and: [lessonFilterContentFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  linkContent: StringFieldComparison
  or: [lessonFilterContentFilter!]
  updateAt: DateFieldComparison
}

input lessonFilterdiciplineFilter {
  and: [lessonFilterdiciplineFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [lessonFilterdiciplineFilter!]
  updateAt: DateFieldComparison
}

type lessonMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  updateAt: DateTime
}

type lessonMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  updateAt: DateTime
}

input lessonSort {
  direction: SortDirection!
  field: lessonSortFields!
  nulls: SortNulls
}

enum lessonSortFields {
  createdAt
  deletedAt
  description
  id
  updateAt
}

input lessonUpdateFilter {
  and: [lessonUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  or: [lessonUpdateFilter!]
  updateAt: DateFieldComparison
}